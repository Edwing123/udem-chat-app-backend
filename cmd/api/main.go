package main

import (
	"fmt"
	"log"
	"os"
	"path"
	"time"

	"github.com/Edwing123/udem-chat-app/pkg/images/profile"
	sqlserver "github.com/Edwing123/udem-chat-app/pkg/models/sql-server"
	_ "github.com/microsoft/go-mssqldb"
)

func main() {
	// Get command line flags.
	flags := GetFlags()

	// Load configuration.
	config, err := LoadConfig(flags.ConfigPath)
	if err != nil {
		log.Fatalln("failed loading config: ", err)
	}

	// Validate the configuration.
	configValidationErrors := ValidateConfig(config)
	if configValidationErrors != nil {
		fmt.Println("Configuration validation failed with the following errors:")
		fmt.Println()

		for _, err := range configValidationErrors {
			fmt.Printf("\t- %s\n", err)
		}

		fmt.Println()
		os.Exit(1)
	}

	// Create appdata directories.
	err = CreateAppDataDirs(config.AppData)
	if err != nil {
		fmt.Println("An error occured while creating appdata dirs:")
		fmt.Println()

		fmt.Println(err)

		fmt.Println()
		os.Exit(1)
	}

	// Create logs file.
	logsFileName := path.Join(
		config.AppData,
		"logs",
		time.Now().Format(time.RFC3339),
	)

	logsFile, err := os.Create(logsFileName)
	if err != nil {
		log.Fatalln(err)
	}
	defer logsFile.Close()

	// Create logger, the output generated by it will be
	// stored to the logs file.
	logger := NewLogger(logsFile)

	// Create sessions store.
	store := NewSessionStore(
		NewRedisStorage(config.Redis),
	)

	// Remember to close the store's underlying storage.
	defer func() {
		store.Storage.Close()
		logger.Info("storage closed")
	}()

	// Setup profile manager.
	profileManager := profile.New(path.Join(config.AppData, "images"))
	err = profileManager.InitDirs()
	if err != nil {
		fmt.Println("An error occured while creating profile manager dirs:")
		fmt.Println()

		fmt.Println(err)

		fmt.Println()
		os.Exit(1)
	}

	// Create connection to SQL Server database.
	sqldb, err := NewSQLServerDatabase(config.Database)
	if err != nil {
		fmt.Println("An error occured while connecting to sql server database:")
		fmt.Println()

		fmt.Println(err)

		fmt.Println()
		os.Exit(1)
	}

	// Create an implementation of `models.Database` using
	// SQL Server as the database.
	databaseImpl := sqlserver.New(sqldb)

	global := Global{
		Logger:         logger,
		Store:          store,
		ProfileManager: &profileManager,
		Database:       &databaseImpl,
	}

	app := global.Setup()
	addr := config.Server.Addr

	app.Hooks().OnListen(func() error {
		logger.Info("server listen start", "addr", addr)
		return nil
	})

	err = app.Listen(addr)

	logger.Error("server listen fail", err)
}
